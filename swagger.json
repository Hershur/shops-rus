{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "ShopsRUs API",
        "description": "This is an API to calculate customers discounts. They are a set of APIs built with the capabilities to calculate discounts, generate the total costs and generate the invoices for customers"
    },
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [
        {
            "name": "Customers",
            "description": "Users endpoints"
        },
        {
            "name": "Invoice",
            "description": "Admin endpoints"
        },
        {
            "name": "Discounts",
            "description": "Teams endpoints"
        },
        {
            "name": "Welcome",
            "description": "Welcome message"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Welcome"
                ],
                "summary": "Welcome message",
                "responses": {
                    "200": {
                        "description": "A successful response, 'Welcome to express server' displayed"
                    }
                }
            }
        },
        "/api/users/login": {
            "post": {
                "tags": [
                    "Customers"
                ],
                "summary": "Create customer",
                "requestBody": {
                    "description": "The route should accept JSON data containing customer information",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/LoginData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully and token generated"
                    },
                    "400": {
                        "description": "User does not exists or invalid token"
                    }
                }
            }
        },
        "/api/users/create": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create user account",
                "requestBody": {
                    "description": "The route should accept JSON data containing user details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UserData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User account is created successfully and token generated"
                    },
                    "400": {
                        "description": "User details are invalid"
                    }
                }
            }
        },
        "/api/admin/login": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Login Admin",
                "requestBody": {
                    "description": "The route should accept JSON data containing login details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/LoginData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Admin logged in successfully and token generated"
                    },
                    "400": {
                        "description": "Admin does not exists or invalid token"
                    }
                }
            }
        },
        "/api/admin/create": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create admin account",
                "requestBody": {
                    "description": "The route should accept JSON data containing user details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/UserData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Admin account is created successfully and token generated"
                    },
                    "400": {
                        "description": "Admin details are invalid"
                    }
                }
            }
        },
        "/api/fixtures/create": {
            "post": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Create a league fixture",
                "requestBody": {
                    "description": "The route should accept JSON data containing fixture details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/FixtureData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Fixture is created successfully and token generated"
                    },
                    "400": {
                        "description": "Fixture details are invalid"
                    }
                }
            }
        },
        "/api/fixtures": {
            "get": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Get all fixtures",
                "responses": {
                    "200": {
                        "description": "A successful response, all fixtures displayed"
                    }
                }
            }
        },
        "/api/fixtures/{fixtureId}": {
            "parameters": [
                {
                    "name": "fixtureId",
                    "in": "path",
                    "required": true,
                    "description": "ID of fixture",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Get a specific fixture",
                "responses": {
                    "200": {
                        "description": "Fixture details is displayed"
                    },
                    "400": {
                        "description": "Fixture does not exists"
                    }
                }
            }
        },
        "/api/fixtures/find": {
            "query": [
                {
                    "name": "status",
                    "in": "path",
                    "required": true,
                    "description": "Status of fixture",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Get fixtures by their status",
                "responses": {
                    "200": {
                        "description": "Fixture details is displayed based on status (completed or pending)"
                    },
                    "400": {
                        "description": "Fixture does not exists"
                    }
                }
            }
        },
        "/api/fixtures/edit/{fixtureId}": {
            "parameters": [
                {
                    "name": "fixtureId",
                    "in": "path",
                    "required": true,
                    "description": "ID of fixture",
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Edit fixture details",
                "requestBody": {
                    "description": "The route should accept JSON data containing fixture details to modify",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/FixtureData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Fixture details is updated successfully"
                    },
                    "400": {
                        "description": "Fixture details are invalid"
                    }
                }
            }
        },
        "/api/fixtures/remove/{fixtureId}": {
            "parameters": [
                {
                    "name": "fixtureId",
                    "in": "path",
                    "required": true,
                    "description": "ID of fixture",
                    "type": "string"
                }
            ],
            "delete": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Delete a specific fixture",
                "responses": {
                    "204": {
                        "description": "Fixture deleted successfully"
                    },
                    "400": {
                        "description": "Fixtures does not exists"
                    }
                }
            }
        },
        "/api/teams/create": {
            "post": {
                "tags": [
                    "Teams"
                ],
                "summary": "Create a league team",
                "requestBody": {
                    "description": "The route should accept JSON data containing team details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/TeamData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Team is created successfully and token generated"
                    },
                    "400": {
                        "description": "Team details are invalid"
                    }
                }
            }
        },
        "/api/teams": {
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get all league teams",
                "responses": {
                    "200": {
                        "description": "A successful response, all teams displayed"
                    }
                }
            }
        },
        "/api/teams/{teamId}": {
            "parameters": [
                {
                    "name": "teamId",
                    "in": "path",
                    "required": true,
                    "description": "ID of team",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Teams"
                ],
                "summary": "Get a specific team",
                "responses": {
                    "200": {
                        "description": "Team details is displayed"
                    },
                    "400": {
                        "description": "Team does not exists"
                    }
                }
            }
        },
        "/api/teams/edit/{teamId}": {
            "parameters": [
                {
                    "name": "teamId",
                    "in": "path",
                    "required": true,
                    "description": "ID of team",
                    "type": "string"
                }
            ],
            "put": {
                "tags": [
                    "Teams"
                ],
                "summary": "Edit team details",
                "requestBody": {
                    "description": "The route should accept JSON data containing team details to modify",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/TeamData"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Team details is updated successfully"
                    },
                    "400": {
                        "description": "Team details are invalid"
                    }
                }
            }
        },
        "/api/teams/remove/{teamId}": {
            "parameters": [
                {
                    "name": "teamId",
                    "in": "path",
                    "required": true,
                    "description": "ID of team",
                    "type": "string"
                }
            ],
            "delete": {
                "tags": [
                    "Teams"
                ],
                "summary": "Delete a specific team",
                "responses": {
                    "204": {
                        "description": "Team deleted successfully"
                    },
                    "400": {
                        "description": "Team does not exists"
                    }
                }
            }
        }
    },
    "definitions": {
        "UserData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "assurance femi"
                },
                "email": {
                    "type": "string",
                    "example": "assurancefemi@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "password1"
                },
                "confirmPassword": {
                    "type": "string",
                    "example": "password1"
                }
            },
            "description": "User details"
        },
        "LoginData": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "assurancefemi@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "password1"
                }
            },
            "description": "Login details"
        },
        "FixtureData": {
            "type": "object",
            "properties": {
                "homeTeam": {
                    "type": "string",
                    "example": "Manchester United"
                },
                "awayTeam": {
                    "type": "string",
                    "example": "Aston Villa"
                },
                "dateTime": {
                    "type": "string",
                    "example": "01/01/2022"
                },
                "venue": {
                    "type": "string",
                    "example": "Old Trafford"
                },
                "referee": {
                    "type": "string",
                    "example": "Paul Tierney"
                },
                "gameweek": {
                    "type": "string",
                    "example": "GW 35"
                },
                "hashTag": {
                    "type": "string",
                    "example": "#MUNAVL"
                }
            },
            "description": "Login details"
        },
        "TeamData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Manchester United"
                },
                "nickName": {
                    "type": "string",
                    "example": "Red Devils"
                },
                "abbrName": {
                    "type": "string",
                    "example": "MUN"
                },
                "stadium": {
                    "type": "string",
                    "example": "Old Trafford"
                }
            },
            "description": "Login details"
        }
    }
      
}